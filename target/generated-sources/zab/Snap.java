// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

package zab;

/**
 * Protobuf type {@code zab.Snap}
 */
public  final class Snap extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:zab.Snap)
    SnapOrBuilder {
  // Use Snap.newBuilder() to construct.
  private Snap(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Snap() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private Snap(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              db_ = com.google.protobuf.MapField.newMapField(
                  DbDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Integer>
            db__ = input.readMessage(
                DbDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            db_.getMutableMap().put(
                db__.getKey(), db__.getValue());
            break;
          }
          case 18: {
            zab.History.Builder subBuilder = null;
            if (history_ != null) {
              subBuilder = history_.toBuilder();
            }
            history_ = input.readMessage(zab.History.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(history_);
              history_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return zab.Types.internal_static_zab_Snap_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 1:
        return internalGetDb();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return zab.Types.internal_static_zab_Snap_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            zab.Snap.class, zab.Snap.Builder.class);
  }

  private int bitField0_;
  public static final int DB_FIELD_NUMBER = 1;
  private static final class DbDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.Integer, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                zab.Types.internal_static_zab_Snap_DbEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.INT32,
                0);
  }
  private com.google.protobuf.MapField<
      java.lang.Integer, java.lang.Integer> db_;
  private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
  internalGetDb() {
    if (db_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          DbDefaultEntryHolder.defaultEntry);
    }
    return db_;
  }

  public int getDbCount() {
    return internalGetDb().getMap().size();
  }
  /**
   * <code>map&lt;uint32, int32&gt; db = 1;</code>
   */

  public boolean containsDb(
      int key) {
    
    return internalGetDb().getMap().containsKey(key);
  }
  /**
   * Use {@link #getDbMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.Integer, java.lang.Integer> getDb() {
    return getDbMap();
  }
  /**
   * <code>map&lt;uint32, int32&gt; db = 1;</code>
   */

  public java.util.Map<java.lang.Integer, java.lang.Integer> getDbMap() {
    return internalGetDb().getMap();
  }
  /**
   * <code>map&lt;uint32, int32&gt; db = 1;</code>
   */

  public int getDbOrDefault(
      int key,
      int defaultValue) {
    
    java.util.Map<java.lang.Integer, java.lang.Integer> map =
        internalGetDb().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;uint32, int32&gt; db = 1;</code>
   */

  public int getDbOrThrow(
      int key) {
    
    java.util.Map<java.lang.Integer, java.lang.Integer> map =
        internalGetDb().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int HISTORY_FIELD_NUMBER = 2;
  private zab.History history_;
  /**
   * <code>optional .zab.History history = 2;</code>
   */
  public boolean hasHistory() {
    return history_ != null;
  }
  /**
   * <code>optional .zab.History history = 2;</code>
   */
  public zab.History getHistory() {
    return history_ == null ? zab.History.getDefaultInstance() : history_;
  }
  /**
   * <code>optional .zab.History history = 2;</code>
   */
  public zab.HistoryOrBuilder getHistoryOrBuilder() {
    return getHistory();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .serializeIntegerMapTo(
        output,
        internalGetDb(),
        DbDefaultEntryHolder.defaultEntry,
        1);
    if (history_ != null) {
      output.writeMessage(2, getHistory());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry
         : internalGetDb().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Integer>
      db__ = DbDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, db__);
    }
    if (history_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getHistory());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof zab.Snap)) {
      return super.equals(obj);
    }
    zab.Snap other = (zab.Snap) obj;

    boolean result = true;
    result = result && internalGetDb().equals(
        other.internalGetDb());
    result = result && (hasHistory() == other.hasHistory());
    if (hasHistory()) {
      result = result && getHistory()
          .equals(other.getHistory());
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    if (!internalGetDb().getMap().isEmpty()) {
      hash = (37 * hash) + DB_FIELD_NUMBER;
      hash = (53 * hash) + internalGetDb().hashCode();
    }
    if (hasHistory()) {
      hash = (37 * hash) + HISTORY_FIELD_NUMBER;
      hash = (53 * hash) + getHistory().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static zab.Snap parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static zab.Snap parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static zab.Snap parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static zab.Snap parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static zab.Snap parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static zab.Snap parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static zab.Snap parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static zab.Snap parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static zab.Snap parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static zab.Snap parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(zab.Snap prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code zab.Snap}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:zab.Snap)
      zab.SnapOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zab.Types.internal_static_zab_Snap_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetDb();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableDb();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zab.Types.internal_static_zab_Snap_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zab.Snap.class, zab.Snap.Builder.class);
    }

    // Construct using zab.Snap.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      internalGetMutableDb().clear();
      if (historyBuilder_ == null) {
        history_ = null;
      } else {
        history_ = null;
        historyBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return zab.Types.internal_static_zab_Snap_descriptor;
    }

    public zab.Snap getDefaultInstanceForType() {
      return zab.Snap.getDefaultInstance();
    }

    public zab.Snap build() {
      zab.Snap result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public zab.Snap buildPartial() {
      zab.Snap result = new zab.Snap(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.db_ = internalGetDb();
      result.db_.makeImmutable();
      if (historyBuilder_ == null) {
        result.history_ = history_;
      } else {
        result.history_ = historyBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof zab.Snap) {
        return mergeFrom((zab.Snap)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(zab.Snap other) {
      if (other == zab.Snap.getDefaultInstance()) return this;
      internalGetMutableDb().mergeFrom(
          other.internalGetDb());
      if (other.hasHistory()) {
        mergeHistory(other.getHistory());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      zab.Snap parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (zab.Snap) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.MapField<
        java.lang.Integer, java.lang.Integer> db_;
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
    internalGetDb() {
      if (db_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            DbDefaultEntryHolder.defaultEntry);
      }
      return db_;
    }
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
    internalGetMutableDb() {
      onChanged();;
      if (db_ == null) {
        db_ = com.google.protobuf.MapField.newMapField(
            DbDefaultEntryHolder.defaultEntry);
      }
      if (!db_.isMutable()) {
        db_ = db_.copy();
      }
      return db_;
    }

    public int getDbCount() {
      return internalGetDb().getMap().size();
    }
    /**
     * <code>map&lt;uint32, int32&gt; db = 1;</code>
     */

    public boolean containsDb(
        int key) {
      
      return internalGetDb().getMap().containsKey(key);
    }
    /**
     * Use {@link #getDbMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getDb() {
      return getDbMap();
    }
    /**
     * <code>map&lt;uint32, int32&gt; db = 1;</code>
     */

    public java.util.Map<java.lang.Integer, java.lang.Integer> getDbMap() {
      return internalGetDb().getMap();
    }
    /**
     * <code>map&lt;uint32, int32&gt; db = 1;</code>
     */

    public int getDbOrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetDb().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, int32&gt; db = 1;</code>
     */

    public int getDbOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetDb().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearDb() {
      getMutableDb().clear();
      return this;
    }
    /**
     * <code>map&lt;uint32, int32&gt; db = 1;</code>
     */

    public Builder removeDb(
        int key) {
      
      getMutableDb().remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableDb() {
      return internalGetMutableDb().getMutableMap();
    }
    /**
     * <code>map&lt;uint32, int32&gt; db = 1;</code>
     */
    public Builder putDb(
        int key,
        int value) {
      
      
      getMutableDb().put(key, value);
      return this;
    }
    /**
     * <code>map&lt;uint32, int32&gt; db = 1;</code>
     */

    public Builder putAllDb(
        java.util.Map<java.lang.Integer, java.lang.Integer> values) {
      getMutableDb().putAll(values);
      return this;
    }

    private zab.History history_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        zab.History, zab.History.Builder, zab.HistoryOrBuilder> historyBuilder_;
    /**
     * <code>optional .zab.History history = 2;</code>
     */
    public boolean hasHistory() {
      return historyBuilder_ != null || history_ != null;
    }
    /**
     * <code>optional .zab.History history = 2;</code>
     */
    public zab.History getHistory() {
      if (historyBuilder_ == null) {
        return history_ == null ? zab.History.getDefaultInstance() : history_;
      } else {
        return historyBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .zab.History history = 2;</code>
     */
    public Builder setHistory(zab.History value) {
      if (historyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        history_ = value;
        onChanged();
      } else {
        historyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>optional .zab.History history = 2;</code>
     */
    public Builder setHistory(
        zab.History.Builder builderForValue) {
      if (historyBuilder_ == null) {
        history_ = builderForValue.build();
        onChanged();
      } else {
        historyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>optional .zab.History history = 2;</code>
     */
    public Builder mergeHistory(zab.History value) {
      if (historyBuilder_ == null) {
        if (history_ != null) {
          history_ =
            zab.History.newBuilder(history_).mergeFrom(value).buildPartial();
        } else {
          history_ = value;
        }
        onChanged();
      } else {
        historyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>optional .zab.History history = 2;</code>
     */
    public Builder clearHistory() {
      if (historyBuilder_ == null) {
        history_ = null;
        onChanged();
      } else {
        history_ = null;
        historyBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>optional .zab.History history = 2;</code>
     */
    public zab.History.Builder getHistoryBuilder() {
      
      onChanged();
      return getHistoryFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .zab.History history = 2;</code>
     */
    public zab.HistoryOrBuilder getHistoryOrBuilder() {
      if (historyBuilder_ != null) {
        return historyBuilder_.getMessageOrBuilder();
      } else {
        return history_ == null ?
            zab.History.getDefaultInstance() : history_;
      }
    }
    /**
     * <code>optional .zab.History history = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        zab.History, zab.History.Builder, zab.HistoryOrBuilder> 
        getHistoryFieldBuilder() {
      if (historyBuilder_ == null) {
        historyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            zab.History, zab.History.Builder, zab.HistoryOrBuilder>(
                getHistory(),
                getParentForChildren(),
                isClean());
        history_ = null;
      }
      return historyBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:zab.Snap)
  }

  // @@protoc_insertion_point(class_scope:zab.Snap)
  private static final zab.Snap DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new zab.Snap();
  }

  public static zab.Snap getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Snap>
      PARSER = new com.google.protobuf.AbstractParser<Snap>() {
    public Snap parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new Snap(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Snap> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Snap> getParserForType() {
    return PARSER;
  }

  public zab.Snap getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

